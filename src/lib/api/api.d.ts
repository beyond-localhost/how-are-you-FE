/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/version': {
        get: operations['getVersion'];
    };
    '/auth/kakao': {
        post: operations['postAuthKakao'];
    };
    '/me': {
        get: operations['getMe'];
    };
    '/recommendation_nickname': {
        get: operations['getRecommendation_nickname'];
    };
    '/me/profile': {
        get: operations['getMeProfile'];
        post: operations['postMeProfile'];
    };
    '/questions/today': {
        get: operations['getQuestionsToday'];
    };
    '/questions/{id}/answers': {
        post: operations['postQuestionsByIdAnswers'];
    };
    '/questions/{id}/answers/{answerId}': {
        delete: operations['deleteQuestionsByIdAnswersByAnswerId'];
        patch: operations['patchQuestionsByIdAnswersByAnswerId'];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {};
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    getVersion: {
        responses: {
            200: {
                content: never;
            };
        };
    };
    postAuthKakao: {
        requestBody: {
            content: {
                'application/json': {
                    destination: string;
                };
                'multipart/form-data': {
                    destination: string;
                };
                'text/plain': {
                    destination: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        url: string;
                    };
                    'multipart/form-data': {
                        url: string;
                    };
                    'text/plain': {
                        url: string;
                    };
                };
            };
        };
    };
    getMe: {
        parameters: {
            header: {
                authorization: string;
            };
        };
        responses: {
            200: {
                content: never;
            };
        };
    };
    getRecommendation_nickname: {
        parameters: {
            header: {
                authorization: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': string;
                    'multipart/form-data': string;
                    'text/plain': string;
                };
            };
        };
    };
    getMeProfile: {
        parameters: {
            header: {
                authorization: string;
            };
        };
        responses: {
            200: {
                content: never;
            };
        };
    };
    postMeProfile: {
        parameters: {
            header: {
                authorization: string;
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    nickname: string;
                    dateOfBirthYear: number;
                    jobs: number[];
                };
                'multipart/form-data': {
                    nickname: string;
                    dateOfBirthYear: number;
                    jobs: number[];
                };
                'text/plain': {
                    nickname: string;
                    dateOfBirthYear: number;
                    jobs: number[];
                };
            };
        };
        responses: {
            201: {
                content: {
                    'application/json': {
                        id: number;
                        nickname: string;
                        dateOfBirthYear: number;
                        jobs: {
                            id: number;
                            job: string;
                        }[];
                    };
                    'multipart/form-data': {
                        id: number;
                        nickname: string;
                        dateOfBirthYear: number;
                        jobs: {
                            id: number;
                            job: string;
                        }[];
                    };
                    'text/plain': {
                        id: number;
                        nickname: string;
                        dateOfBirthYear: number;
                        jobs: {
                            id: number;
                            job: string;
                        }[];
                    };
                };
            };
            400: {
                content: {
                    'application/json': string;
                    'multipart/form-data': string;
                    'text/plain': string;
                };
            };
        };
    };
    getQuestionsToday: {
        parameters: {
            header: {
                authorization: string;
            };
        };
        responses: {
            200: {
                content: never;
            };
        };
    };
    postQuestionsByIdAnswers: {
        parameters: {
            header: {
                authorization: string;
            };
            path: {
                id: string | number;
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    answer: string;
                };
                'multipart/form-data': {
                    answer: string;
                };
                'text/plain': {
                    answer: string;
                };
            };
        };
        responses: {
            200: {
                content: never;
            };
        };
    };
    deleteQuestionsByIdAnswersByAnswerId: {
        parameters: {
            header: {
                authorization: string;
            };
            path: {
                id: string | number;
                answerId: string | number;
            };
        };
        responses: {
            200: {
                content: never;
            };
        };
    };
    patchQuestionsByIdAnswersByAnswerId: {
        parameters: {
            header: {
                authorization: string;
            };
            path: {
                id: string | number;
                answerId: string | number;
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    answer: string;
                };
                'multipart/form-data': {
                    answer: string;
                };
                'text/plain': {
                    answer: string;
                };
            };
        };
        responses: {
            200: {
                content: never;
            };
        };
    };
}
